// Завдання 8/48
// Стрілочні функції мають скорочений, лаконічніший синтаксис, що зменшує обсяг коду, особливо коли функція маленька або якщо вона використовується як колбек.

// Усі стрілки створюються як функціональний вираз, і якщо функція - не анонімна, її необхідно присвоювати змінній.

// // Звичайне оголошення функції
// function classicAdd(a, b, c) {
//   return a + b + c;
// }

// // Те саме стрілочною функцією
// const arrowAdd = (a, b, c) => {
//   return a + b + c;
// };
// Ключове слово function не використовується, замість цього відразу зазначається оголошення параметрів, після нього - символ => і тіло функції.

// Якщо параметрів декілька, то вони перераховуються через кому в круглих дужках, між знаками рівності = і стрілкою =>.

// const add = (a, b, c) => {
//   return a + b + c;
// };
// Якщо параметр один, його можна оголошувати без круглих дужок.

// const add = a => {
//   return a + 5;
// };
// Якщо параметри відсутні, то обов'язково повинні бути порожні круглі дужки.

// const greet = () => {
//   console.log("Привіт!");
// };

// // До завдання

// Завдання 8/48
// Виконай рефакторинг функції calculateTotalPrice() таким чином, щоб вона була оголошена як стрілочна.

// Change code below this line

// function calculateTotalPrice(quantity, pricePerItem) {
const calculateTotalPrice = (quantity, pricePerItem) => {
    console.log(quantity * pricePerItem);
  // Change code above this line
  return quantity * pricePerItem;
}

// Оголошена змінна calculateTotalPrice
// Змінній calculateTotalPrice присвоєна стрілочна функція з параметрами (quantity, pricePerItem)
// Виклик 
calculateTotalPrice(5, 100);
//  повертає 500
// Виклик 
calculateTotalPrice(8, 60);
//  повертає 480
// Виклик 
calculateTotalPrice(3, 400);
//  повертає 1200
// Виклик функції з випадковими, але валідними аргументами, повертає правильне значення
calculateTotalPrice(8, 7); //  буде 56